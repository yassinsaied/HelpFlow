security:
   # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
   password_hashers:
      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
   # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
   providers:
      # used to reload user from session & other features (e.g. switch_user)
      app_user_provider:
         entity:
            class: App\Entity\User
            property: email

   role_hierarchy:
      ROLE_ADMIN: [ROLE_MANAGER, ROLE_TECHNICIAN]
      ROLE_MANAGER: [ROLE_TECHNICIAN]
      ROLE_TECHNICIAN: []
      ROLE_CLIENT: []

   firewalls:
      dev:
         pattern: ^/(_(profiler|wdt)|css|images|js)/
         security: false

      login: # Doit être placé AVANT le firewall 'api'
         pattern: ^/api/login_check # Doit correspondre exactement au check_path
         stateless: true
         json_login:
            check_path: /api/login_check
            username_path: email # Décommenter
            password_path: password # Décommenter
            success_handler: lexik_jwt_authentication.handler.authentication_success
            failure_handler: lexik_jwt_authentication.handler.authentication_failure

      refresh_token:
         pattern: ^/api/token/refresh
         stateless: true
         provider: app_user_provider # provider in database
         refresh_jwt:
            check_path: api_refresh_token

      api:
         pattern: ^/api
         stateless: true
         jwt: ~

      main:
         lazy: true
         provider: app_user_provider
         custom_authenticators:
            - App\Security\LoginFormAuthenticator
         logout:
            path: app_logout
            target: app_home
            invalidate_session: true
            delete_cookies:
               - REMEMBERME
         remember_me:
            secret: '%kernel.secret%'
            lifetime: 2592000 # 30 jours
            path: /
            secure: true
            samesite: lax

      # activate different ways to authenticate
      # https://symfony.com/doc/current/security.html#the-firewall

      # https://symfony.com/doc/current/security/impersonating_user.html
      # switch_user: true

   # Easy way to control access for large sections of your site
   # Note: Only the *first* access control that matches will be used
   access_control:
      - { path: ^/api/token/refresh$, roles: PUBLIC_ACCESS } # Ajouter en premier
      - { path: ^/api/login_check, roles: PUBLIC_ACCESS }
      - { path: ^/api, roles: PUBLIC_ACCESS } # Sécuriser le reste de l'API
      - { path: ^/login, roles: PUBLIC_ACCESS }
      - { path: ^/register, roles: PUBLIC_ACCESS }
      - { path: ^/reset-password, roles: PUBLIC_ACCESS }
      - { path: ^/home, roles: ROLE_CLIENT }
      - { path: ^/profile, roles: ROLE_USER }
      - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }

when@test:
   security:
      password_hashers:
         # By default, password hashers are resource intensive and take time. This is
         # important to generate secure password hashes. In tests however, secure hashes
         # are not important, waste resources and increase test times. The following
         # reduces the work factor to the lowest possible values.
         Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
            algorithm: auto
            cost: 4 # Lowest possible value for bcrypt
            time_cost: 3 # Lowest possible value for argon
            memory_cost: 10 # Lowest possible value for argon

# ///////////////////////////
# security:
#    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
#    password_hashers:
#       Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
#    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
#    providers:
#       # used to reload user from session & other features (e.g. switch_user)
#       app_user_provider:
#          entity:
#             class: App\Entity\User
#             property: email

#    role_hierarchy:
#       ROLE_ADMIN: [ROLE_MANAGER, ROLE_TECHNICIAN]
#       ROLE_MANAGER: [ROLE_TECHNICIAN]
#       ROLE_TECHNICIAN: []
#       ROLE_CLIENT: []

#    firewalls:
#       dev:
#          pattern: ^/(_(profiler|wdt)|css|images|js)/
#          security: false

#       api:
#          pattern: ^/api
#          stateless: true
#          entry_point: jwt
#          json_login:
#             check_path: api_login_check # or, if you have defined a route for your login path, the route name you used
#             success_handler: lexik_jwt_authentication.handler.authentication_success
#             failure_handler: lexik_jwt_authentication.handler.authentication_failure
#          jwt: ~
#          refresh_jwt:
#             check_path: api_refresh_token # or, you may use the `api_refresh_token` route name
#             # or if you have more than one user provider
#             # provider: app_user_provider
#       main:
#          lazy: true
#          provider: app_user_provider
#          custom_authenticators:
#             - App\Security\LoginFormAuthenticator
#          logout:
#             path: app_logout
#             target: app_home
#             invalidate_session: true
#             delete_cookies:
#                - REMEMBERME
#          remember_me:
#             secret: '%kernel.secret%'
#             lifetime: 2592000 # 30 jours
#             path: /
#             secure: true
#             samesite: lax

#          # activate different ways to authenticate
#          # https://symfony.com/doc/current/security.html#the-firewall

#          # https://symfony.com/doc/current/security/impersonating_user.html
#          # switch_user: true

#    # Easy way to control access for large sections of your site
#    # Note: Only the *first* access control that matches will be used
#    access_control:
#       - { path: ^/login, roles: PUBLIC_ACCESS }
#       - { path: ^/register, roles: PUBLIC_ACCESS }
#       - { path: ^/reset-password, roles: PUBLIC_ACCESS }
#       - { path: ^/home, roles: ROLE_CLIENT }
#       # - { path: ^/api/login, roles: PUBLIC_ACCESS }
#       - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }
#       - { path: ^/api/(login_check|token/refresh), roles: PUBLIC_ACCESS }
#       #   - { path: ^/profile, roles: ROLE_USER }
#       #   - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }

# when@test:
#    security:
#       password_hashers:
#          # By default, password hashers are resource intensive and take time. This is
#          # important to generate secure password hashes. In tests however, secure hashes
#          # are not important, waste resources and increase test times. The following
#          # reduces the work factor to the lowest possible values.
#          Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
#             algorithm: auto
#             cost: 4 # Lowest possible value for bcrypt
#             time_cost: 3 # Lowest possible value for argon
#             memory_cost: 10 # Lowest possible value for argon
